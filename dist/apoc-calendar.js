/*!
 * Copyright 2018, nju33
 * Released under the MIT License
 * https://github.com/nju33/apoc-calendar
 */
var ApocCalendar = (function () {
'use strict';

function noop() {}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function appendNode(node, target) {
	target.appendChild(node);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function differs(a, b) {
	return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function init(component, options) {
	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}
}

function callAll(fns) {
	while (fns && fns.length) fns.pop()();
}

function _mount(target, anchor) {
	this._fragment.m(target, anchor);
}

function _unmount() {
	if (this._fragment) this._fragment.u();
}

var proto = {
	destroy: destroy,
	get: get,
	fire: fire,
	observe: observe,
	on: on,
	set: set,
	teardown: destroy,
	_recompute: noop,
	_set: _set,
	_mount: _mount,
	_unmount: _unmount
};

/* lib/date-cell.html generated by Svelte v1.49.3 */
function data$1() {
	return {
		data: new Date()
	}
}

function oncreate$1() {
	console.log(this);
}

function create_main_fragment$2(state, component) {
	var div;

	return {
		c: function create() {
			div = createElement("div");
			div.textContent = "alskjdf";
			this.h();
		},

		h: function hydrate() {
			div.className = '';
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
		},

		p: noop,

		u: function unmount() {
			detachNode(div);
		},

		d: noop
	};
}

function Date_cell(options) {
	init(this, options);
	this._state = assign(data$1(), options.data);

	var _oncreate = oncreate$1.bind(this);

	if (!options.root) {
		this._oncreate = [_oncreate];
	} else {
	 	this.root._oncreate.push(_oncreate);
	 }

	this._fragment = create_main_fragment$2(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		callAll(this._oncreate);
	}
}

assign(Date_cell.prototype, proto);

var range = function range(from, to) {
  var result = [];
  for (var i = from; i <= to; i++) {
    result.push(i);
  }

  return result;
};

/* lib/month.html generated by Svelte v1.49.3 */
function data() {
	return {
		dates: [],
	};
}

function oncreate() {
	const today = (() => {
		const todayDate = new Date();
		return {
			year: todayDate.getFullYear(),
			month: todayDate.getMonth(),
		};
	})();

	const dates = range(
		new Date(today.year, today.month, 1).getDate(),
		new Date(today.year, today.month + 1, 0).getDate(),
	);

	this.dates = dates.map(date => {
		const thatDate = new Date(today.year, today.month, date);
		return {
			year: thatDate.getFullYear(),
			month: thatDate.getMonth(),
			date: thatDate.getDate(),
			day: thatDate.getDay(),
		};
	});
}

function create_main_fragment$1(state, component) {
	var ul, each_lookup = blankObject(), each_head, each_last;

	var dates = state.dates;

	for (var i = 0; i < dates.length; i += 1) {
		var key = dates[i].date;
		var each_iteration = each_lookup[key] = create_each_block(state, dates, dates[i], i, component, key);

		if (each_last) each_last.next = each_iteration;
		each_iteration.last = each_last;
		each_last = each_iteration;

		if (i === 0) each_head = each_iteration;
	}

	function each_destroy(iteration) {
		iteration.u();
		iteration.d();
		each_lookup[iteration.key] = null;
	}

	return {
		c: function create() {
			ul = createElement("ul");

			var each_iteration = each_head;
			while (each_iteration) {
				each_iteration.c();
				each_iteration = each_iteration.next;
			}
		},

		m: function mount(target, anchor) {
			insertNode(ul, target, anchor);

			var each_iteration = each_head;
			while (each_iteration) {
				each_iteration.m(ul, null);
				each_iteration = each_iteration.next;
			}
		},

		p: function update(changed, state) {
			var dates = state.dates;

			var each_expected = each_head;
			var each_last = null;

			var discard_pile = [];

			for (i = 0; i < dates.length; i += 1) {
				var key = dates[i].date;
				var each_iteration = each_lookup[key];

				if (each_iteration) each_iteration.p(changed, state, dates, dates[i], i);

				if (each_expected) {
					if (key === each_expected.key) {
						each_expected = each_expected.next;
					} else {
						if (each_iteration) {
							// probably a deletion
							while (each_expected && each_expected.key !== key) {
								each_expected.discard = true;
								discard_pile.push(each_expected);
								each_expected = each_expected.next;
							}

							each_expected = each_expected && each_expected.next;
							each_iteration.discard = false;
							each_iteration.last = each_last;

							if (!each_expected) each_iteration.m(ul, null);
						} else {
							// key is being inserted
							each_iteration = each_lookup[key] = create_each_block(state, dates, dates[i], i, component, key);
							each_iteration.c();
							each_iteration.m(ul, each_expected.first);

							each_expected.last = each_iteration;
							each_iteration.next = each_expected;
						}
					}
				} else {
					// we're appending from this point forward
					if (each_iteration) {
						each_iteration.discard = false;
						each_iteration.next = null;
						each_iteration.m(ul, null);
					} else {
						each_iteration = each_lookup[key] = create_each_block(state, dates, dates[i], i, component, key);
						each_iteration.c();
						each_iteration.m(ul, null);
					}
				}

				if (each_last) each_last.next = each_iteration;
				each_iteration.last = each_last;
				each_last = each_iteration;
			}

			if (each_last) each_last.next = null;

			while (each_expected) {
				each_destroy(each_expected);
				each_expected = each_expected.next;
			}

			for (i = 0; i < discard_pile.length; i += 1) {
				var each_iteration = discard_pile[i];
				if (each_iteration.discard) {
					each_destroy(each_iteration);
				}
			}

			each_head = each_lookup[dates[0] && dates[0].date];
		},

		u: function unmount() {
			detachNode(ul);
		},

		d: function destroy$$1() {
			var each_iteration = each_head;
			while (each_iteration) {
				each_iteration.d();
				each_iteration = each_iteration.next;
			}
		}
	};
}

// (2:1) {{#each dates as date @date}}
function create_each_block(state, dates, date, date_index, component, key) {
	var li;

	var datecell = new Date_cell({
		root: component.root,
		data: { date: date }
	});

	return {
		key: key,

		first: null,

		c: function create() {
			li = createElement("li");
			datecell._fragment.c();
			this.h();
		},

		h: function hydrate() {
			this.first = li;
		},

		m: function mount(target, anchor) {
			insertNode(li, target, anchor);
			datecell._mount(li, null);
		},

		p: function update(changed, state, dates, date, date_index) {
			var datecell_changes = {};
			if (changed.dates) datecell_changes.date = date;
			datecell._set(datecell_changes);
		},

		u: function unmount() {
			detachNode(li);
		},

		d: function destroy$$1() {
			datecell.destroy(false);
		}
	};
}

function Month(options) {
	init(this, options);
	this._state = assign(data(), options.data);

	var _oncreate = oncreate.bind(this);

	if (!options.root) {
		this._oncreate = [_oncreate];
		this._beforecreate = [];
		this._aftercreate = [];
	} else {
	 	this.root._oncreate.push(_oncreate);
	 }

	this._fragment = create_main_fragment$1(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		this._lock = true;
		callAll(this._beforecreate);
		callAll(this._oncreate);
		callAll(this._aftercreate);
		this._lock = false;
	}
}

assign(Month.prototype, proto);

/* lib/calendar.html generated by Svelte v1.49.3 */
function create_main_fragment(state, component) {
	var h1, text;

	var month = new Month({
		root: component.root
	});

	return {
		c: function create() {
			h1 = createElement("h1");
			text = createText("Hello ");
			month._fragment.c();
		},

		m: function mount(target, anchor) {
			insertNode(h1, target, anchor);
			appendNode(text, h1);
			month._mount(h1, null);
		},

		p: noop,

		u: function unmount() {
			detachNode(h1);
		},

		d: function destroy$$1() {
			month.destroy(false);
		}
	};
}

function Calendar$1(options) {
	init(this, options);
	this._state = assign({}, options.data);

	if (!options.root) {
		this._oncreate = [];
		this._beforecreate = [];
		this._aftercreate = [];
	}

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		this._lock = true;
		callAll(this._beforecreate);
		callAll(this._oncreate);
		callAll(this._aftercreate);
		this._lock = false;
	}
}

assign(Calendar$1.prototype, proto);

return Calendar$1;

}());
